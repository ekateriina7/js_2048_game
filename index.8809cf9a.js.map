{"mappings":"AEOA,MAAM,EAgBJ,OAAO,cAAgB,CACrB,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,AAAC,AAEF,aAAY,EAAe,EAAK,aAAa,CAAE,CAC7C,IAAI,CAAC,YAAY,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EACtD,IAAI,CAAC,KAAK,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAC/C,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,UAAW,CACT,IAAI,CAAC,cAAc,CAAC,CAAA,EACtB,CAEA,WAAY,CACV,IAAI,CAAC,cAAc,CAAC,CAAA,EACtB,CAEA,QAAS,CACP,IAAI,CAAC,YAAY,CAAC,CAAA,EACpB,CAEA,UAAW,CACT,IAAI,CAAC,YAAY,CAAC,CAAA,EACpB,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAYA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAKA,OAAQ,CACN,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,CAAC,UACjB,CAKA,SAAU,CAER,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EACpD,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,CAAG,CACf,CAGA,UAAW,CACT,IAAI,CAAC,eAAe,GACpB,IAAI,CAAC,eAAe,EACtB,CAEA,SAAS,CAAQ,CAAE,CACjB,IAAI,CAAC,KAAK,EAAI,CAChB,CAEA,UAAU,CAAS,CAAE,CACnB,IAAI,CAAC,MAAM,CAAG,CAChB,CAEA,SAAS,CAAQ,CAAE,CACjB,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,gBAAgB,EAAM,IAAI,CAAE,EAAM,IAAI,CAAE,EAAS,IAAI,CAAE,CACrD,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACI,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAE,IAAK,EAAG,IAAK,CAAE,GAKvC,GAAI,EAAW,MAAM,CAAE,CACrB,IAAM,EAAQ,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EACpD,EAAuB,CAAU,CAAC,EAAM,CACxC,EAAY,AAAQ,OAAR,EAAe,EAAM,EAAqB,GAAG,CACzD,EAAY,AAAQ,OAAR,EAAe,EAAM,EAAqB,GAAG,AAI/D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAU,CAAC,EAAU,CAF9B,AAAW,OAAX,EAAkB,EAAS,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CAGzD,CACF,CAEA,QAAQ,CAAK,CAAE,CACb,IAAM,EAAW,EAAE,CACf,EAAa,EACb,EAAO,CAAA,EAEX,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACrC,GAAI,EAAM,CACR,EAAO,CAAA,EACP,QACF,CAEiB,IAAb,CAAK,CAAC,EAAE,GACN,CAAK,CAAC,EAAE,GAAK,CAAK,CAAC,EAAI,EAAE,EAC3B,EAAS,IAAI,CAAC,AAAW,EAAX,CAAK,CAAC,EAAE,EACtB,GAAc,AAAW,EAAX,CAAK,CAAC,EAAE,CACtB,EAAO,CAAA,GAEP,EAAS,IAAI,CAAC,CAAK,CAAC,EAAE,EAG5B,CAEA,KAAO,EAAS,MAAM,CAAG,GACvB,EAAS,IAAI,CAAC,GAKhB,OAFA,IAAI,CAAC,QAAQ,CAAC,GAEP,CACT,CAEA,eAAe,EAAQ,CAAA,CAAK,CAAE,CAC5B,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EAEZ,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAM,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAE1B,GACF,EAAI,OAAO,GAGb,IAAM,EAAS,IAAI,CAAC,OAAO,CAAC,GAExB,GACF,EAAO,OAAO,GAGZ,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,KAAO,EAAO,QAAQ,IAC9C,CAAA,EAAQ,CAAA,CADV,EAGA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,CAClB,CAEI,IACF,IAAI,CAAC,eAAe,GAEhB,IAAI,CAAC,QAAQ,GACf,IAAI,CAAC,SAAS,CAAC,OACN,IAAI,CAAC,SAAS,IACvB,IAAI,CAAC,SAAS,CAAC,QAGrB,CAEA,aAAa,EAAO,CAAA,CAAK,CAAE,CACzB,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EAEZ,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAM,EAAM,EAAE,CAEd,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,EAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAGvB,GACF,EAAI,OAAO,GAGb,IAAM,EAAS,IAAI,CAAC,OAAO,CAAC,GAExB,GACF,EAAO,OAAO,GAGhB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACjB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,CAAM,CAAC,EAAE,EAChC,CAAA,EAAQ,CAAA,CADV,EAGA,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAM,CAAC,EAAE,AAEhC,CAEI,IACF,IAAI,CAAC,eAAe,GAEhB,IAAI,CAAC,QAAQ,GACf,IAAI,CAAC,SAAS,CAAC,OACN,IAAI,CAAC,SAAS,IACvB,IAAI,CAAC,SAAS,CAAC,QAGrB,CAEA,UAAW,CACT,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,GAAI,AAAqB,OAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAClB,MAAO,CAAA,EAKb,MAAO,CAAA,CACT,CAEA,WAAY,CACV,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,GAAyB,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAIhB,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,EAIlD,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CAPpD,MAAO,CAAA,EAab,MAAO,CAAA,CACT,CACF,CDvRA,MAAM,EAAO,ICyRI,EDvRX,EAAc,SAAS,aAAa,CAAC,iBACrC,EAAmB,SAAS,aAAa,CAAC,sBAC1C,EAAY,SAAS,aAAa,CAAC,eAEnC,EAAmB,KACvB,IAAM,EAAQ,EAAK,QAAQ,GACrB,EAAO,SAAS,gBAAgB,CAAC,cAEvC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACrC,IAAM,EAAM,CAAK,CAAC,EAAE,CACd,EAAQ,CAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,eAEvC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAI,MAAM,CAAE,IAAK,CACnC,IAAM,EAAO,CAAG,CAAC,EAAE,CACb,EAAc,CAAK,CAAC,EAAE,CAExB,GACF,EAAY,SAAS,CAAG,EACxB,EAAY,SAAS,CAAG,CAAC,uBAAuB,EAAE,EAAK,CAAC,GAExD,EAAY,SAAS,CAAG,GACxB,EAAY,SAAS,CAAG,aAE5B,CACF,CACF,EAEM,EAAc,KAClB,IAAM,EAAY,EAAK,SAAS,GAC5B,EAAU,GACV,EAAe,EAEf,AAAc,CAAA,SAAd,GACF,EAAU,0CACV,EAAe,iBACN,AAAc,YAAd,GACT,EAAU,GACV,EAAe,UACN,AAAc,QAAd,GACT,EAAU,gCACV,EAAe,eACQ,SAAd,IACT,EAAU,8BACV,EAAe,gBAGjB,EAAiB,SAAS,CAAG,CAAC,kBAAkB,EAAE,EAAa,EAAE,EAAE,EAAQ,IAAI,CAAC,AAClF,EAEM,EAAY,KAChB,EAAU,SAAS,CAAG,EAAK,QAAQ,EACrC,EAgBA,EAAY,gBAAgB,CAAC,QAdX,KACS,SAArB,EAAK,SAAS,IAGhB,EAAK,OAAO,GAFZ,EAAK,KAAK,GAKZ,IACA,IACA,IACA,EAAY,WAAW,CAAG,UAC1B,EAAY,SAAS,CAAG,gBAC1B,GA2BA,SAAS,gBAAgB,CAAC,UAvBT,AAAC,IAChB,OAAQ,EAAE,GAAG,EACX,IAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,KAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,GACb,KACF,SACE,MACJ,CAEA,IACA,IACA,GACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ static INITIAL_STATE = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    constructor(initialState = $a5fd07fa01589658$var$Game.INITIAL_STATE){\n        this.initialState = initialState.map((row)=>[\n                ...row\n            ]);\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveLeft() {\n        this.moveHorizontal(false);\n    }\n    moveRight() {\n        this.moveHorizontal(true);\n    }\n    moveUp() {\n        this.moveVertical(false);\n    }\n    moveDown() {\n        this.moveVertical(true);\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.setBoard();\n        this.setStatus(\"playing\");\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        // this.initialState = [...Game.INITIAL_STATE.map((row) => [...row])];\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    // Add your own methods here\n    setBoard() {\n        this.addRandomNumber();\n        this.addRandomNumber();\n    }\n    setScore(newScore) {\n        this.score += newScore;\n    }\n    setStatus(newStatus) {\n        this.status = newStatus;\n    }\n    setState(newState) {\n        this.state = newState;\n    }\n    addRandomNumber(row = null, col = null, number = null) {\n        const emptyCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.state[i][j] === 0) emptyCells.push({\n                row: i,\n                col: j\n            });\n        }\n        if (emptyCells.length) {\n            const index = Math.floor(Math.random() * emptyCells.length);\n            const randomCellCoordinate = emptyCells[index];\n            const targetRow = row !== null ? row : randomCellCoordinate.row;\n            const targetCol = col !== null ? col : randomCellCoordinate.col;\n            const targetNumber = number !== null ? number : Math.random() < 0.9 ? 2 : 4;\n            this.state[targetRow][targetCol] = targetNumber;\n        }\n    }\n    combine(cells) {\n        const combined = [];\n        let scoreToAdd = 0;\n        let skip = false;\n        for(let i = 0; i < cells.length; i++){\n            if (skip) {\n                skip = false;\n                continue;\n            }\n            if (cells[i] !== 0) {\n                if (cells[i] === cells[i + 1]) {\n                    combined.push(cells[i] * 2);\n                    scoreToAdd += cells[i] * 2;\n                    skip = true;\n                } else combined.push(cells[i]);\n            }\n        }\n        while(combined.length < 4)combined.push(0);\n        this.setScore(scoreToAdd);\n        return combined;\n    }\n    moveHorizontal(right = false) {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = 0; i < 4; i++){\n            const row = [\n                ...this.state[i]\n            ];\n            if (right) row.reverse();\n            const newRow = this.combine(row);\n            if (right) newRow.reverse();\n            if (this.state[i].toString() !== newRow.toString()) moved = true;\n            this.state[i] = newRow;\n        }\n        if (moved) {\n            this.addRandomNumber();\n            if (this.checkWin()) this.setStatus(\"win\");\n            else if (this.checkLose()) this.setStatus(\"lose\");\n        }\n    }\n    moveVertical(down = false) {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = 0; i < 4; i++){\n            const col = [];\n            for(let j = 0; j < 4; j++)col.push(this.state[j][i]);\n            if (down) col.reverse();\n            const newCol = this.combine(col);\n            if (down) newCol.reverse();\n            for(let j = 0; j < 4; j++){\n                if (this.state[j][i] !== newCol[j]) moved = true;\n                this.state[j][i] = newCol[j];\n            }\n        }\n        if (moved) {\n            this.addRandomNumber();\n            if (this.checkWin()) this.setStatus(\"win\");\n            else if (this.checkLose()) this.setStatus(\"lose\");\n        }\n    }\n    checkWin() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.state[i][j] === 2048) return true;\n        }\n        return false;\n    }\n    checkLose() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.state[i][j] === 0) return false;\n            if (j < 3 && this.state[i][j] === this.state[i][j + 1]) return false;\n            if (i < 3 && this.state[i][j] === this.state[i + 1][j]) return false;\n        }\n        return true;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$messageContainer = document.querySelector(\".message-container\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$showCurrentBoard = ()=>{\n    const state = $09e991522ca7e64e$var$game.getState();\n    const rows = document.querySelectorAll(\".field-row\");\n    for(let i = 0; i < state.length; i++){\n        const row = state[i];\n        const cells = rows[i].querySelectorAll(\".field-cell\");\n        for(let j = 0; j < row.length; j++){\n            const cell = row[j];\n            const cellElement = cells[j];\n            if (cell) {\n                cellElement.innerHTML = cell;\n                cellElement.className = `field-cell field-cell--${cell}`;\n            } else {\n                cellElement.innerHTML = \"\";\n                cellElement.className = \"field-cell\";\n            }\n        }\n    }\n};\nconst $09e991522ca7e64e$var$showMessage = ()=>{\n    const newStatus = $09e991522ca7e64e$var$game.getStatus();\n    let message = \"\";\n    let messageClass = \"\";\n    if (newStatus === \"idle\") {\n        message = 'Press \"Start\" to begin game. Good luck!';\n        messageClass = \"message-start\";\n    } else if (newStatus === \"playing\") {\n        message = \"\";\n        messageClass = \"hidden\";\n    } else if (newStatus === \"win\") {\n        message = \"Winner! Congrats! You did it!\";\n        messageClass = \"message-win\";\n    } else if (newStatus === \"lose\") {\n        message = \"You lose! Restart the game?\";\n        messageClass = \"message-lose\";\n    }\n    $09e991522ca7e64e$var$messageContainer.innerHTML = `<p class=\"message ${messageClass}\">${message}</p>`;\n};\nconst $09e991522ca7e64e$var$showScore = ()=>{\n    $09e991522ca7e64e$var$gameScore.innerHTML = $09e991522ca7e64e$var$game.getScore();\n};\nconst $09e991522ca7e64e$var$startGame = ()=>{\n    if ($09e991522ca7e64e$var$game.getStatus() === \"idle\") $09e991522ca7e64e$var$game.start();\n    else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$game.start();\n    }\n    $09e991522ca7e64e$var$showCurrentBoard();\n    $09e991522ca7e64e$var$showScore();\n    $09e991522ca7e64e$var$showMessage();\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startButton.className = \"button restart\";\n};\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$startGame);\nconst $09e991522ca7e64e$var$makeMove = (e)=>{\n    switch(e.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$showScore();\n    $09e991522ca7e64e$var$showMessage();\n    $09e991522ca7e64e$var$showCurrentBoard();\n};\ndocument.addEventListener(\"keydown\", $09e991522ca7e64e$var$makeMove);\n\n\n//# sourceMappingURL=index.8809cf9a.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startButton = document.querySelector('.button.start');\nconst messageContainer = document.querySelector('.message-container');\nconst gameScore = document.querySelector('.game-score');\n\nconst showCurrentBoard = () => {\n  const state = game.getState();\n  const rows = document.querySelectorAll('.field-row');\n\n  for (let i = 0; i < state.length; i++) {\n    const row = state[i];\n    const cells = rows[i].querySelectorAll('.field-cell');\n\n    for (let j = 0; j < row.length; j++) {\n      const cell = row[j];\n      const cellElement = cells[j];\n\n      if (cell) {\n        cellElement.innerHTML = cell;\n        cellElement.className = `field-cell field-cell--${cell}`;\n      } else {\n        cellElement.innerHTML = '';\n        cellElement.className = 'field-cell';\n      }\n    }\n  }\n};\n\nconst showMessage = () => {\n  const newStatus = game.getStatus();\n  let message = '';\n  let messageClass = '';\n\n  if (newStatus === 'idle') {\n    message = 'Press \"Start\" to begin game. Good luck!';\n    messageClass = 'message-start';\n  } else if (newStatus === 'playing') {\n    message = '';\n    messageClass = 'hidden';\n  } else if (newStatus === 'win') {\n    message = 'Winner! Congrats! You did it!';\n    messageClass = 'message-win';\n  } else if (newStatus === 'lose') {\n    message = 'You lose! Restart the game?';\n    messageClass = 'message-lose';\n  }\n\n  messageContainer.innerHTML = `<p class=\"message ${messageClass}\">${message}</p>`;\n};\n\nconst showScore = () => {\n  gameScore.innerHTML = game.getScore();\n};\n\nconst startGame = () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n  } else {\n    game.restart();\n    game.start();\n  }\n  showCurrentBoard();\n  showScore();\n  showMessage();\n  startButton.textContent = 'Restart';\n  startButton.className = 'button restart';\n};\n\nstartButton.addEventListener('click', startGame);\n\nconst makeMove = (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  showScore();\n  showMessage();\n  showCurrentBoard();\n};\n\ndocument.addEventListener('keydown', makeMove);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  static INITIAL_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  constructor(initialState = Game.INITIAL_STATE) {\n    this.initialState = initialState.map((row) => [...row]);\n    this.state = initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  moveLeft() {\n    this.moveHorizontal(false);\n  }\n\n  moveRight() {\n    this.moveHorizontal(true);\n  }\n\n  moveUp() {\n    this.moveVertical(false);\n  }\n\n  moveDown() {\n    this.moveVertical(true);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.setBoard();\n    this.setStatus('playing');\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    // this.initialState = [...Game.INITIAL_STATE.map((row) => [...row])];\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  // Add your own methods here\n  setBoard() {\n    this.addRandomNumber();\n    this.addRandomNumber();\n  }\n\n  setScore(newScore) {\n    this.score += newScore;\n  }\n\n  setStatus(newStatus) {\n    this.status = newStatus;\n  }\n\n  setState(newState) {\n    this.state = newState;\n  }\n\n  addRandomNumber(row = null, col = null, number = null) {\n    const emptyCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push({ row: i, col: j });\n        }\n      }\n    }\n\n    if (emptyCells.length) {\n      const index = Math.floor(Math.random() * emptyCells.length);\n      const randomCellCoordinate = emptyCells[index];\n      const targetRow = row !== null ? row : randomCellCoordinate.row;\n      const targetCol = col !== null ? col : randomCellCoordinate.col;\n      const targetNumber =\n        number !== null ? number : Math.random() < 0.9 ? 2 : 4;\n\n      this.state[targetRow][targetCol] = targetNumber;\n    }\n  }\n\n  combine(cells) {\n    const combined = [];\n    let scoreToAdd = 0;\n    let skip = false;\n\n    for (let i = 0; i < cells.length; i++) {\n      if (skip) {\n        skip = false;\n        continue;\n      }\n\n      if (cells[i] !== 0) {\n        if (cells[i] === cells[i + 1]) {\n          combined.push(cells[i] * 2);\n          scoreToAdd += cells[i] * 2;\n          skip = true;\n        } else {\n          combined.push(cells[i]);\n        }\n      }\n    }\n\n    while (combined.length < 4) {\n      combined.push(0);\n    }\n\n    this.setScore(scoreToAdd);\n\n    return combined;\n  }\n\n  moveHorizontal(right = false) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = [...this.state[i]];\n\n      if (right) {\n        row.reverse();\n      }\n\n      const newRow = this.combine(row);\n\n      if (right) {\n        newRow.reverse();\n      }\n\n      if (this.state[i].toString() !== newRow.toString()) {\n        moved = true;\n      }\n      this.state[i] = newRow;\n    }\n\n    if (moved) {\n      this.addRandomNumber();\n\n      if (this.checkWin()) {\n        this.setStatus('win');\n      } else if (this.checkLose()) {\n        this.setStatus('lose');\n      }\n    }\n  }\n\n  moveVertical(down = false) {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const col = [];\n\n      for (let j = 0; j < 4; j++) {\n        col.push(this.state[j][i]);\n      }\n\n      if (down) {\n        col.reverse();\n      }\n\n      const newCol = this.combine(col);\n\n      if (down) {\n        newCol.reverse();\n      }\n\n      for (let j = 0; j < 4; j++) {\n        if (this.state[j][i] !== newCol[j]) {\n          moved = true;\n        }\n        this.state[j][i] = newCol[j];\n      }\n    }\n\n    if (moved) {\n      this.addRandomNumber();\n\n      if (this.checkWin()) {\n        this.setStatus('win');\n      } else if (this.checkLose()) {\n        this.setStatus('lose');\n      }\n    }\n  }\n\n  checkWin() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 2048) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  checkLose() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 0) {\n          return false;\n        }\n\n        if (j < 3 && this.state[i][j] === this.state[i][j + 1]) {\n          return false;\n        }\n\n        if (i < 3 && this.state[i][j] === this.state[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","INITIAL_STATE","constructor","initialState","map","row","state","status","score","moveLeft","moveHorizontal","moveRight","moveUp","moveVertical","moveDown","getScore","getState","getStatus","start","setBoard","setStatus","restart","addRandomNumber","setScore","newScore","newStatus","setState","newState","col","number","emptyCells","i","j","push","length","index","Math","floor","random","randomCellCoordinate","targetRow","targetCol","combine","cells","combined","scoreToAdd","skip","right","moved","reverse","newRow","toString","checkWin","checkLose","down","newCol","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$messageContainer","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$showCurrentBoard","rows","querySelectorAll","cell","cellElement","innerHTML","className","$09e991522ca7e64e$var$showMessage","message","messageClass","$09e991522ca7e64e$var$showScore","addEventListener","textContent","e","key"],"version":3,"file":"index.8809cf9a.js.map"}